{"version":3,"sources":["components/Square/index.js","components/axios-instance.js","components/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["Sqaure","onClick","value","hoverValue","winningLane","index","useState","isHovered","setIsHovered","isWinner","includes","isClicked","isHover","className","onMouseEnter","onMouseLeave","instance","axios","create","baseURL","Game","Array","fill","squares","setSquares","isXNext","setIsXNext","isDraw","setIsDraw","userSymbol","setUserSymbol","setwinningLane","results","setResults","nextSymbol","useEffect","fetchResults","isBoardFull","i","length","possibleLines","a","b","c","winner","calculateWinner","async","get","res","X","data","O","draw","console","log","setResult","result","put","rightConfig","angle","spread","startVelocity","elementCount","dragFriction","duration","width","height","colors","leftConfig","top","left","x","o","Promise","all","deleteAllResults","data-tip","place","map","_","key","nextSquares","slice","selectSquare","active","config","right","isBoardEmpty","bottom","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cf327a57.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './index.css';\r\n\r\nconst Sqaure = ({ onClick, value, hoverValue, winningLane, index }) => {\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const isWinner = winningLane\r\n    ? winningLane.includes(index)\r\n      ? ' highlight'\r\n      : ''\r\n    : '';\r\n  const isClicked = value !== null ? (value === 'X' ? 'x' : 'o') : '';\r\n  const isHover =\r\n    isHovered && value == null\r\n      ? hoverValue === 'X'\r\n        ? 'x-placeholder'\r\n        : 'o-placeholder'\r\n      : '';\r\n  return (\r\n    <div\r\n      className={isHover + isClicked + isWinner + ' square'}\r\n      onClick={onClick}\r\n      onMouseEnter={() => {\r\n        setIsHovered(true);\r\n      }}\r\n      onMouseLeave={() => {\r\n        setIsHovered(false);\r\n      }}\r\n    >\r\n      {value}\r\n      {isHovered && !value && !winningLane ? hoverValue : null}\r\n    </div>\r\n  );\r\n};\r\nexport default Sqaure;\r\n","import axios from 'axios';\r\nconst instance = axios.create({\r\n  baseURL: 'https://tictactoe-21dd9.firebaseio.com'\r\n});\r\nexport default instance;\r\n","import React, { useState, useEffect, Fragment } from 'react';\r\nimport Fade from 'react-reveal/Fade';\r\nimport Tada from 'react-reveal/Tada';\r\nimport Pulse from 'react-reveal/Pulse';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport Confetti from 'react-dom-confetti';\r\nimport Square from '../Square';\r\nimport axios from '../axios-instance';\r\nimport './index.css';\r\n\r\nconst Game = () => {\r\n  const [squares, setSquares] = useState(Array(9).fill(null));\r\n  const [isXNext, setIsXNext] = useState(true);\r\n  const [isDraw, setIsDraw] = useState(false);\r\n  const [userSymbol, setUserSymbol] = useState(null);\r\n  const [winningLane, setwinningLane] = useState(null);\r\n  const [results, setResults] = useState([0, 0, 0]);\r\n  const nextSymbol = isXNext ? 'X' : 'O';\r\n  useEffect(() => {\r\n    fetchResults();\r\n  });\r\n\r\n  const calculateWinner = squares => {\r\n    const possibleLines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ];\r\n    for (let i = 0; i < possibleLines.length; i++) {\r\n      const [a, b, c] = possibleLines[i];\r\n      if (\r\n        squares[a] &&\r\n        squares[a] === squares[b] &&\r\n        squares[a] === squares[c]\r\n      ) {\r\n        return { winner: squares[a], winningLane: [a, b, c] };\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n  const isBoardEmpty = squares => {\r\n    for (let i = 0; i < squares.length; i++) {\r\n      if (squares[i] !== null) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n  const isBoardFull = squares => {\r\n    for (let i = 0; i < squares.length; i++) {\r\n      if (squares[i] == null) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n  const isWinner = calculateWinner(squares);\r\n  const resetGame = () => {\r\n    setSquares(Array(9).fill(null));\r\n    setIsXNext(true);\r\n    setwinningLane(null);\r\n    setIsDraw(false);\r\n    // if (isBoardFull(squares) || isWinner) {\r\n    //   setUserSymbol(null);\r\n    // }\r\n  };\r\n\r\n  const getStatus = () => {\r\n    if (isWinner) {\r\n      if (!winningLane) {\r\n        setwinningLane(isWinner.winningLane);\r\n        setResult(isWinner.winner);\r\n      }\r\n      return (\r\n        <Tada>\r\n          <p>\r\n            <i className='fas fa-trophy' /> The winner is: {isWinner.winner}\r\n          </p>\r\n        </Tada>\r\n      );\r\n    } else if (isBoardFull(squares)) {\r\n      if (!isDraw) {\r\n        setResult('draw');\r\n      }\r\n      return (\r\n        <Pulse>\r\n          <p> Its a Draw!</p>\r\n        </Pulse>\r\n      );\r\n    } else {\r\n      return <p>Next player: {nextSymbol}</p>;\r\n    }\r\n  };\r\n  const selectSquare = i => {\r\n    if (squares[i] !== null || isWinner !== null) {\r\n      return;\r\n    }\r\n    const nextSquares = squares.slice();\r\n    nextSquares[i] = nextSymbol;\r\n    setSquares(nextSquares);\r\n    setIsXNext(!isXNext);\r\n  };\r\n  const fetchResults = async () => {\r\n    try {\r\n      const res = await axios.get('.json');\r\n      setResults({ X: res.data.X, O: res.data.O, draw: res.data.draw });\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n  const setResult = async result => {\r\n    if (result === 'draw') {\r\n      setIsDraw(true);\r\n    }\r\n    try {\r\n      const res = await axios.get(`/${result}.json`);\r\n      return await axios.put(`/${result}.json`, res.data + 1);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n  const deleteAllResults = async () => {\r\n    try {\r\n      const x = axios.put('/X.json', 0);\r\n      const o = axios.put('/O.json', 0);\r\n      const draw = axios.put('/draw.json', 0);\r\n      await Promise.all([x, o, draw]);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n  const rightConfig = {\r\n    angle: 60,\r\n    spread: 45,\r\n    startVelocity: 40,\r\n    elementCount: 300,\r\n    dragFriction: 0.1,\r\n    duration: 2000,\r\n    width: '1.5em',\r\n    height: '1.5em',\r\n    colors: [\r\n      '#f0cd74',\r\n      '#f3f3e7',\r\n      isWinner !== null ? (isWinner.winner === 'X' ? '#e6493e' : '#26b472') : ''\r\n    ]\r\n  };\r\n  const leftConfig = {\r\n    angle: 120,\r\n    spread: 45,\r\n    startVelocity: 40,\r\n    elementCount: 300,\r\n    dragFriction: 0.1,\r\n    duration: 2000,\r\n    width: '1.5em',\r\n    height: '1.5em',\r\n    colors: [\r\n      '#f0cd74',\r\n      '#f3f3e7',\r\n      isWinner !== null ? (isWinner.winner === 'X' ? '#e6493e' : '#26b472') : ''\r\n    ]\r\n  };\r\n\r\n  return !userSymbol ? (\r\n    <Fade bottom>\r\n      <div className='select-symbol'>\r\n        <p className='select-symbol-title'>Choose your player</p>\r\n        <p\r\n          className='symbol x'\r\n          onClick={() => {\r\n            setUserSymbol('X');\r\n            setIsXNext(true);\r\n          }}\r\n        >\r\n          X\r\n        </p>\r\n        <p\r\n          className='symbol o'\r\n          onClick={() => {\r\n            setUserSymbol('O');\r\n            setIsXNext(false);\r\n          }}\r\n        >\r\n          O\r\n        </p>\r\n      </div>\r\n    </Fade>\r\n  ) : (\r\n    <Fragment>\r\n      <Fade top>\r\n        <Fade left>\r\n          <div className='title'>\r\n            <span className='x-placeholder'>X</span>:{results.X}|\r\n            <span className='o-placeholder'>O</span>: {results.O}|\r\n            <span>Draw: {results.draw}</span>\r\n            <i\r\n              onClick={() => deleteAllResults()}\r\n              className='fa fa-trash deleteBtn'\r\n              data-tip='Delete results history'\r\n            ></i>\r\n            <ReactTooltip place='right' />\r\n          </div>\r\n        </Fade>\r\n        <div className='board'>\r\n          {squares.map((_, i) => {\r\n            return (\r\n              <Square\r\n                key={i}\r\n                index={i}\r\n                winningLane={winningLane}\r\n                value={squares[i]}\r\n                hoverValue={isXNext ? 'X' : 'O'}\r\n                onClick={() => {\r\n                  selectSquare(i);\r\n                }}\r\n              />\r\n            );\r\n          })}\r\n          <div className='right-confetti-wrapper'>\r\n            <Confetti active={isWinner !== null} config={rightConfig} />\r\n          </div>\r\n          <div className='left-confetti-wrapper'>\r\n            <Confetti active={isWinner !== null} config={leftConfig} />\r\n          </div>\r\n        </div>\r\n      </Fade>\r\n      <Fade right>\r\n        <div className='options'>\r\n          <div className='game-info'>{getStatus()}</div>\r\n          {isBoardEmpty(squares) ? null : (\r\n            <button onClick={() => resetGame()} className='btn'>\r\n              {isBoardFull(squares) || isWinner ? 'Play again' : 'Reset game'}\r\n            </button>\r\n          )}\r\n        </div>\r\n      </Fade>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default Game;\r\n","import React from 'react';\nimport Game from './components/Game';\nimport './App.css';\nimport '../node_modules/semantic-ui-css/semantic.min.css';\n\nfunction App() {\n  return (\n    <div className='app'>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}